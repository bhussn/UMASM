#   calc40.ums
#
#   Assignment:      RPN Calculator
#   Authors:         Baydan Hussen (bhusse01) and Neelofar Tamboli
#   Date:            12/8/2024
#
#   Purpose: Commands for the calculator module
#
#   Calling Conventions: 
#                    - r1 = 0 
#                    - r6 and r7 are temps 
#                    - r2 holds the stack pointer
#                    - r1 holds the return address and return result
#                    - r3 holds the ptr to the value stack
#

#initalize temporary registers, r0, and the value stack 
.temps r6,r7
.zero r0
.section rodata
    .space 10000
        value_stack:

#initialize the jump table
.section rodata
    jump_table:
        .space 256

.section init
    .temps r5, r6, r7 #add a temporary register
    r0 := 0
    r3 := 0

    initialize_jumptable_loop:
        r3 := r3 + jump_table
        m[r0][r3] := input_error
        r3 := r3 - jump_table
        r3 := r3 + 1
    if (r3 != 255) goto initialize_jumptable_loop

    m[r0][jump_table + '0'] := digit
    m[r0][jump_table + '1'] := digit
    m[r0][jump_table + '2'] := digit
    m[r0][jump_table + '3'] := digit
    m[r0][jump_table + '4'] := digit
    m[r0][jump_table + '5'] := digit
    m[r0][jump_table + '6'] := digit
    m[r0][jump_table + '7'] := digit
    m[r0][jump_table + '8'] := digit
    m[r0][jump_table + '9'] := digit

    #restore registers
    r1 := 0
    r2 := 0
    r3 := 0
    r4 := 0
    r5 := 0
    r6 := 0
    r7 := 0
    .temps r6, r7

.section text
# main
#   Purpose: links the program's main loop for urt0.ums
#   args:       none
#   returns:    none
    main:
        goto run_calc_func
        halt

#   run_calc_func
#   purpose: runs the RPN calculator by placing input into r1, calling the
#            each function by its calling convention, and handles the ending
#            of the program
#   args:       none
#   returns:    none
#   expects:    none (except standard calling conventions)
#   registers:  r1 stores input char, r3 stores pointer to value stack,
#               r5 briefly used to index into jump table
run_calc_func:
    push r1 on stack r2
    push r5 on stack r2

    #set value stack to r3
    r3 := value_stack

    waiting:
        .temps r5, r6, r7
        r1 := input()

        # check for EOF
        if(r1 == -1) goto run_calc_return

        #switch to jumptable
        .temps r6, r7
        r5 := jump_table + r1
        push r5 on stack r2
        goto m[r0][r5]
    
    # return statement
    run_calc_return:
        halt

# input_error
#  Purpose: takes a value in r1 that is not part of the calling conventions
#           and prints it as incorrect digit
#  args: none
#  expects:  r1 to hold a value that is not a calling convention
#  registers: r1 as incorrect input
input_error:
    output "Unknown character '"
    output r1 #failing here
    output "'\n"
    goto waiting

# digit
#  Purpose: takes the input in r1 and checks that it is a digit
#  args: none
#  expects: none (except standard calling conventions)
#  registers:  r1 stores input value
digit:
    push r4 on stack r2
    r4 := 0
    digit_loop:
        r1 := r1 - '0'
        r4 := r4 * 10
        r4 := r4 + r1
        r1 := input()

        # check if input is a digit
        .temps r5, r6, r7
        if (r1 <s 48) goto digit_return
            if (r1 <s 58) goto digit_loop

    digit_return:
    push r4 on stack r3 # put digit on stack
    pop r4 off stack r2 # restore r4
    r1 := r1 + jump_table
    goto m[r0][r1] # jump to command in jump table

# check_correct_num_args
#  Purpose: checks if value stack has minimum number of args for provided 
#            operation by subtracting value 
#  args: none
#  expects: r3 to be pointing to top of value stack and standard calling
#           conventions are followed
#  registers: r4 stores the number of arguments
check_correct_num_args:
    push r1 on stack r2
    push r4 on stack r2
    push r5 on stack r2
    
    #get stack size
    r4 := value_stack - r3
    push 0 on stack r2

    #check size stack is greater than needed arugments for operation
    if(r4 >=s m[r0][r2 + 4]) goto correct_args
        output "Stack underflow---expected at least "

        #get the needed number of arguments
        .temps r6, r7
        r5 := m[r0][r2 + 4]
        push r5 on stack r2
        .temps r5, r6, r7
        goto printd linking r1
        output " element"

        #check if there are 1 or 2 elements
        r4 := m[r0][r2 + 4]
        if(r4 != 2) goto one_elem_needed
            output 's'

        one_elem_needed:   
        output '\n'
        m[r0][r2] := 1
    
    correct_args:
    #restore the pushed regs 
    pop r1 off stack r2
    pop r5 off stack r2
    pop r4 off stack r2
    pop r6 off stack r2
    pop stack r2
    goto r6


        ########################## commands ##########################

# space
#   purpose: Does nothing but return to calculator main loop
#   args:       none
#   returns:    none
.section init
    m[r0][jump_table + ' '] := space
.section text
    space:
        goto waiting

# newline
#   purpose: prints the content of the value stack by using r4 as a buffer for
#            values added to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 stores input, r4 is the buffer for values added to stack
#   returns:    none
.section init
    m[r0][jump_table + '\n'] := newline
.section text 
newline:    
    push r3 on stack r2

    #print each value on stack
    print_loop:
    if(r3 == value_stack) goto print_return
        output ">>> "
        push m[r0][r3] on stack r2
        goto printd linking r1
        output '\n'
        r3 := 1 + r3
        goto print_loop
    
    print_return:
    pop r3 off stack r2
    goto waiting

#   flip_sign
#   purpose: pops the top number on the stack, negates it, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 holds the value on the stack and the result
#   returns:    none
.section init
    m[r0][jump_table + 'c'] := flip_sign
.section text
flip_sign:
    #check for the correct number of elements on the stack
    push 1 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    .temps r6, r7
    #get number
    pop r1 off stack r3
    r1 := r1 * -1

    #return
    push r1 on stack r3
    goto waiting

#   complement
#   purpose: pops the top number on the stack, nands it, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 holds the value on the stack and the result
#   returns:    none
.section init
    m[r0][jump_table + '~'] := complement
.section text
complement:
    #check for the correct number of elements on the stack
    push 1 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    .temps r6, r7
    #get number
    pop r1 off stack r3
    r1 := r1 nand r1

    #return
    push r1 on stack r3
    goto waiting


#   duplicate
#   purpose: pops the top number on the stack, duplicates it, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 holds the value on the stack and the result
#   returns:    none
.section init
    m[r0][jump_table + 'd'] := duplicate
.section text
duplicate:
    #check for the correct number of elements on the stack
    push 1 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    .temps r6, r7
    #get number
    pop r1 off stack r3

    #duplicate it
    push r1 on stack r3
    push r1 on stack r3

    goto waiting

#   pop_num
#   purpose: pops the top number on the stack, duplicates it, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 holds the value on the stack and the result
#   returns:    none
.section init
    m[r0][jump_table + 'p'] := pop_num
.section text
pop_num:
    #check for the correct number of elements on the stack
    push 1 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    .temps r6, r7
    #pop number
    pop stack r3

    goto waiting

#   zero_stack
#   purpose: removes all values from the value stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 holds the number of values on the stack
#   returns:    none
.section init
    m[r0][jump_table + 'z'] := zero_stack
.section text
zero_stack:
    #check if there are values on the stack
    r1 := value_stack - r3

    #check if stack is empty
    .temps r5, r6, r7
    if(r1 == 0) goto waiting

    #remove from stack
    remove_loop:
    if(r1 == 0) goto all_removed
        #pop number
        pop stack r3
    remove_check:
    r1 := r1 - 1;
    if(r1 != 0) goto remove_loop

    all_removed:
    goto waiting
        

#   add
#   purpose: pops the two tops numbers on the stack, adds them, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 and r5 hold the two values on the stack, r1 also holds the
#              result
#   returns:    none
.section init
    m[r0][jump_table + '+'] := add
.section text
add:
    #check for the correct number of elements on the stack
    push 2 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    .temps r6, r7
    #get numbers
    pop r1 off stack r3
    pop r5 off stack r3

    #add the numbers
    r1 := r1 + r5

    #push back onto stack
    push r1 on stack r3

    #back to main
    goto waiting  

#   subtract
#   purpose: pops the two tops numbers on the stack, subtracts them, result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 and r5 hold the two values on the stack, r1 also holds the
#              result
#   returns:    none
.section init
    m[r0][jump_table + '-'] := subtract
.section text
subtract:
    #check for the correct number of elements on the stack
    push 2 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    #get numbers
    .temps r6, r7
    pop r1 off stack r3
    pop r5 off stack r3

    #subtract numbers
    r1 := r5 - r1
    push r1 on stack r3
    goto waiting

#   multiply
#   purpose: pops the two tops numbers on the stack, multiplies them, result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r4 and r5 hold the two values on the stack, r1 also holds the
#              result 
#   returns:    none
.section init
    m[r0][jump_table + '*'] := multiply
.section text
multiply:
    #check for the correct number of elements on the stack
    push 2 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    #get numbers
    .temps r6, r7
    pop r1 off stack r3
    pop r5 off stack r3

    #multiply numbers
    r1 := r5 * r1
    push r1 on stack r3
    goto waiting

#   divide
#   purpose: pops the two tops numbers on the stack, divides them, result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r4 and r1 hold the two values on the stack, r1 also holds the
#              result
#   returns:    none
.section init
    m[r0][jump_table + '/'] := divide
.section text
divide:
    #check for the correct number of elements on the stack
    push 2 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    #using r5 as a temp, r4 is used for other val and quotient
    pop r1 off stack r3
    pop r4 off stack r3

    if(r1 != 0) goto valid_division
        output "Division by zero\n"

        #restore value stack and r4
        push r4 on stack r3
        push r1 on stack r3
        pop r4 off stack r2
        goto waiting

    valid_division:
    #this represnts the sign of the division
    push 1 on stack r2

    #check the sign of first number
    if(r1 >s 0) goto first_not_neg
        #make the sign negative
        m[r0][r2] := m[r0][r2] * -1
        r1 := r1 * -1

    first_not_neg:
    #check the second numbers sign
    if(r4 >s 0) goto second_not_neg
        #flip the sign
        m[r0][r2] := m[r0][r2] * -1
        r4 := r4 * -1

    second_not_neg:
    #check for division of the largest number
    push -2147483648 on stack r2
    if(r4 != m[r0][r2]) goto not_most_negative
        m[r0][r2 + 1] := -1

    not_most_negative:
    pop stack r2

    #do the operation, get the correct sign, and push
    r1 := r4 / r1
    r1 := r1 * m[r0][r2]
    push r1 on stack r3

    #restore registers
    pop stack r2
    pop r4 off stack r2
    goto waiting

#   or
#   purpose: pops the two tops numbers on the stack, ors them, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 and r5 hold the two values on the stack, r1 also holds the
#              result
#   returns:    none
.section init
    m[r0][jump_table + '|'] := or
.section text
or:
    #check for the correct number of elements on the stack
    push 2 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    if(r1 == 1) goto waiting

    .temps r6, r7
    #get numbers
    pop r5 off stack r3
    pop r1 off stack r3

    #or the numbers
    r1 := r1 nand r1
    r5 := r5 nand r5
    r1 := r1 nand r5

    #return
    push r1 on stack r3
    goto waiting

#   and
#   purpose: pops the two tops numbers on the stack, ands them, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 and r5 hold the two values on the stack, r1 also holds the
#              result
#   returns:    none
.section init
    m[r0][jump_table + '&'] := and
.section text
and:
    #check for the correct number of elements on the stack
    push 2 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    .temps r6, r7
    #get numbers
    pop r5 off stack r3
    pop r1 off stack r3

    r1 := r1 nand r5
    r1 := r1 nand r1

    #return
    push r1 on stack r3
    goto waiting

#   swap
#   purpose: pops the two tops numbers on the stack, swaps them, pushes result
#            back on to the stack
#   args:       none
#   expects: r3 is pointing to top of value_stack
#   registers: r1 and r5 hold the two values on the stack, r1 also holds the
#              result
#   returns:    none
.section init
    m[r0][jump_table + 's'] := swap
.section text
swap:
    #check for the correct number of elements on the stack
    push 2 on stack r2
    goto check_correct_num_args linking r1

    #return to main loop if there isn't enough elements on the stack
    .temps r5, r6, r7
    if(r1 == 1) goto waiting

    .temps r6, r7
    #get nums
    pop r5 off stack r3
    pop r1 off stack r3

    #swap
    push r5 on stack r3
    push r1 on stack r3

    goto waiting
