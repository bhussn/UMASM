.section init
    .zero r0
    .temps r6,r7

# r1 hold incoming digit
# r2 hold stack pointer
# r5 hold value stack

.section rodata
    jumptable:
        .space 256

.section data
    value_stack:
        .space 10000
        end_value_stack:

.section init
    r5 := end_value_stack

.section init
    .temp r6, r7
    .zero r0
    push r3 on stack r2
    push r4 on stack r2

# initialize jumptable to input_error
initialize_jumptable:

    jump_loop:
        r3 := 0
        m[0][jumptable + r3] = input_error
        r3 := r3 + 1

    jump_main:
        if (r3 != 256) goto jump_loop

############################################# need to be finished 
.section text
    digit:
        #The code associated with this label stores the digit on the value stack and goes to the entering state

.section init
    #do the digit loop thing to set the digits to digit label

.section text
    waiting:
        #write the waiting code
.section init
    m[r0][jumptable + ' '] := waiting
############################################# need to be finished 


############# adding the operators #############
.section init
    m[r0] [jumptable + '*'] := mul
.section text
    mul:
